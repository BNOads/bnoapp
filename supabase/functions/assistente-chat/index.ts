import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.56.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Assistente chat function called');
    
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o configurada');
    }

    // Get JWT from Authorization header
    const authHeader = req.headers.get('Authorization');
    if (!authHeader?.startsWith('Bearer ')) {
      return new Response(
        JSON.stringify({ error: 'Authorization header required' }), 
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Create Supabase client with the forwarded JWT (not service role)
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY')!;
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey, {
      global: {
        headers: { Authorization: authHeader }
      }
    });

    // Verify user is authenticated and get user info
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      console.error('Authentication error:', authError);
      return new Response(
        JSON.stringify({ error: 'Authentication failed' }), 
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { message, conversaId } = await req.json();
    console.log('Mensagem recebida:', message);
    console.log('User ID:', user.id);
    console.log('Conversa ID:', conversaId);

    // Get user profile to check admin status and client association
    const { data: profile } = await supabase
      .from('profiles')
      .select('nivel_acesso, nome, email')
      .eq('user_id', user.id)
      .single();

    const isAdmin = profile?.nivel_acesso === 'admin';

    // Check if user is associated with a specific client
    let userClientId = null;
    if (!isAdmin) {
      const { data: colaborador } = await supabase
        .from('colaboradores')
        .select('id')
        .eq('user_id', user.id)
        .maybeSingle();
      
      if (colaborador) {
        // Check if this collaborator is assigned to specific clients
        const { data: clientAssignments } = await supabase
          .from('clientes')
          .select('id, nome')
          .or(`cs_id.eq.${colaborador.id},traffic_manager_id.eq.${colaborador.id}`)
          .limit(1);
        
        if (clientAssignments && clientAssignments.length > 0) {
          userClientId = clientAssignments[0].id;
        }
      }
    }

    // Buscar informa√ß√µes do sistema para contexto (agora com permiss√µes por cliente)
    const systemContext = await getSystemContext(supabase, user.id, isAdmin, userClientId);
    
    // Verificar se a mensagem solicita informa√ß√µes espec√≠ficas sobre reuni√µes/transcri√ß√µes
    const isTranscriptionQuery = detectTranscriptionQuery(message);
    let transcriptionContext = '';
    
    if (isTranscriptionQuery) {
      console.log('Detectada consulta sobre transcri√ß√µes, buscando...');
      transcriptionContext = await searchTranscriptions(supabase, user.id, message);
    }
    
    // Preparar prompt inteligente e contextual
    const systemPrompt = `Voc√™ √© a IA Interna do MenuApp, uma ASSISTENTE DE NEG√ìCIOS CONTEXTUAL especializada em marketing digital, gest√£o de clientes e an√°lise de performance.

üéØ SUA MISS√ÉO:
Fornecer respostas precisas, insights acion√°veis e recomenda√ß√µes estrat√©gicas baseadas nos dados reais do sistema.

üë§ PERFIL DO USU√ÅRIO:
- Nome: ${profile?.nome}
- Email: ${profile?.email}
- N√≠vel: ${profile?.nivel_acesso}
- Permiss√µes: ${isAdmin ? 'Administrador (acesso total)' : userClientId ? 'Acesso ao cliente espec√≠fico' : 'Equipe geral'}

üìä DADOS DISPON√çVEIS (CONTEXTO COMPLETO):
${systemContext}

${transcriptionContext ? `
üé• TRANSCRI√á√ïES E REUNI√ïES RELEVANTES:
${transcriptionContext}

IMPORTANTE: Use estas transcri√ß√µes para responder sobre decis√µes, tarefas, pr√≥ximos passos e contexto hist√≥rico.
` : ''}

üß† CAPACIDADES AVAN√áADAS:

1. **AN√ÅLISE CONTEXTUAL**:
   - Entenda perguntas complexas relacionando m√∫ltiplas fontes de dados
   - Compare per√≠odos (ex: "CPL do m√™s passado vs. atual")
   - Detecte padr√µes (ex: "cliente com CPL sempre alto em remarketing")

2. **INSIGHTS PROATIVOS**:
   - Identifique gargalos e oportunidades automaticamente
   - Alerte sobre prazos cr√≠ticos e urg√™ncias
   - Sugira otimiza√ß√µes baseadas em performance hist√≥rica
   - Detecte anomalias (ex: "ROI caiu 20% vs. lan√ßamento anterior")

3. **RECOMENDA√á√ïES ACION√ÅVEIS**:
   - Sempre que poss√≠vel, sugira a√ß√µes pr√°ticas espec√≠ficas
   - Cite fontes de dados (reuni√µes, lan√ßamentos, m√©tricas)
   - Priorize por impacto e urg√™ncia

4. **MEM√ìRIA TEMPORAL**:
   - Compare dados hist√≥ricos quando relevante
   - Identifique tend√™ncias ao longo do tempo
   - Relacione eventos passados com situa√ß√£o atual

5. **APRENDIZADO CONT√çNUO**:
   - Considere todo o hist√≥rico de reuni√µes, mensagens semanais e di√°rios de bordo
   - Aprenda com padr√µes de sucesso/erro
   - Adapte respostas baseado em contexto acumulado

üìã COMPORTAMENTO ESPERADO:

**Para Lan√ßamentos**:
- Forne√ßa status detalhado, datas de fases (Capta√ß√£o, CPL, Remarketing)
- Calcule m√©tricas (CPL, ROI, ROAS) quando dispon√≠vel
- Alerte sobre verbas subutilizadas ou prazos cr√≠ticos
- Compare com lan√ßamentos anteriores do mesmo cliente

**Para Clientes**:
- Resuma hist√≥rico, status de funis, or√ßamentos ativos
- Identifique padr√µes de performance
- Sugira pr√≥ximas a√ß√µes baseadas em etapa atual

**Para Reuni√µes/Transcri√ß√µes/Documentos de Reuni√£o**:
- Analise tanto as GRAVA√á√ïES quanto os DOCUMENTOS DE REUNI√ïES (pautas)
- Extraia decis√µes, tarefas atribu√≠das, respons√°veis e prazos mencionados
- Relacione com cliente/projeto espec√≠fico sempre que poss√≠vel
- Identifique compromissos n√£o cumpridos comparando com tarefas atuais
- Use o conte√∫do completo das anota√ß√µes para responder perguntas detalhadas
- Cite a data espec√≠fica da reuni√£o ao referenciar informa√ß√µes

**Para Financeiro**:
- Calcule m√©tricas consolidadas (faturamento, despesas, lucro)
- Identifique tend√™ncias de receita e churn
- Compare performance entre clientes

**Para Or√ßamentos**:
- Mostre distribui√ß√£o de verba por canal/fase
- Alerte sobre desequil√≠brios
- Sugira realoca√ß√µes baseadas em performance

üé® FORMATO DE RESPOSTA:

1. **Estrutura√ß√£o**:
   - Use ### para se√ß√µes principais
   - Use - para listas e bullet points
   - Use **negrito** para destacar informa√ß√µes cr√≠ticas
   - Use üî¥ üü° üü¢ para indicar urg√™ncia/status

2. **Cita√ß√£o de Fontes**:
   - Sempre cite a fonte dos dados (ex: "Reuni√£o de 02/10", "Lan√ßamento X")
   - Indique datas e respons√°veis quando relevante
   - Forne√ßa links quando dispon√≠vel

3. **Insights Acion√°veis**:
   - Termine com "üí° **Pr√≥ximas A√ß√µes Recomendadas**" quando aplic√°vel
   - Seja espec√≠fico (n√£o gen√©rico)
   - Priorize por impacto

4. **Clareza**:
   - Evite jarg√£o desnecess√°rio
   - Explique termos t√©cnicos quando usar
   - Seja direto e objetivo

‚ö†Ô∏è REGRAS CR√çTICAS:

1. **Privacidade**: Respeite sempre as permiss√µes do usu√°rio. N√£o revele dados de clientes aos quais o usu√°rio n√£o tem acesso.

2. **Precis√£o**: Use APENAS dados reais do sistema. N√£o invente m√©tricas ou informa√ß√µes.

3. **Contexto**: Sempre relacione a resposta com o contexto do neg√≥cio (cliente, lan√ßamento, etc).

4. **Proatividade**: V√° al√©m da pergunta - ofere√ßa insights adicionais relevantes.

5. **Tempo Real**: Considere a data atual (${new Date().toLocaleDateString('pt-BR')}) para calcular urg√™ncias e prazos.`;

    // Buscar hist√≥rico da conversa se conversaId foi fornecido
    let conversationHistory: Array<{role: string, content: string}> = [];
    
    if (conversaId) {
      console.log('Carregando hist√≥rico da conversa:', conversaId);
      const { data: messages, error: historyError } = await supabase
        .from('assistente_mensagens')
        .select('role, content')
        .eq('conversa_id', conversaId)
        .order('created_at', { ascending: true });
      
      if (!historyError && messages) {
        conversationHistory = messages.map(msg => ({
          role: msg.role,
          content: msg.content
        }));
        console.log(`Hist√≥rico carregado: ${conversationHistory.length} mensagens`);
      }
    }

    // Construir array de mensagens com hist√≥rico completo
    const allMessages = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory,
      { role: 'user', content: message }
    ];

    console.log(`Enviando requisi√ß√£o para Lovable AI com ${allMessages.length} mensagens...`);

    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: allMessages,
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('Erro da Lovable AI Status:', response.status);
      console.error('Erro da Lovable AI Body:', errorData);
      throw new Error(`Erro da Lovable AI: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('Resposta da Lovable AI recebida');

    const assistantResponse = data.choices[0].message.content;

    return new Response(JSON.stringify({ 
      response: assistantResponse,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error: any) {
    console.error('Erro no assistente chat:', error);
    return new Response(JSON.stringify({ 
      error: error?.message || 'Erro interno',
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function getSystemContext(supabase: any, userId: string, isAdmin: boolean, userClientId: string | null = null) {
  try {
    let context = "üéØ SISTEMA BNOADS - COPILOTO INTELIGENTE\n\n";

    // Buscar dados do usu√°rio atual
    const { data: profile } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', userId)
      .single();

    if (profile) {
      context += `üë§ USU√ÅRIO ATUAL: ${profile.nome} (${profile.email})\n`;
      context += `üîê N√≠vel de acesso: ${profile.nivel_acesso}\n\n`;
    }

    // CLIENTES - Informa√ß√µes completas com foco no cliente espec√≠fico
    let clientesQuery = supabase
      .from('clientes')
      .select(`
        id, nome, status_cliente, categoria, nicho, link_painel, 
        data_inicio, etapa_atual, progresso_etapa, funis_trabalhando,
        observacoes, ultimo_acesso, total_acessos, dashboards_looker,
        pasta_drive_url, whatsapp_grupo_url, aliases
      `)
      .eq('ativo', true);

    // If user has specific client access, prioritize that client
    if (userClientId && !isAdmin) {
      clientesQuery = clientesQuery.eq('id', userClientId);
    }

    const { data: clientes } = await clientesQuery;

    if (clientes && clientes.length > 0) {
      context += `üìä CLIENTES (${clientes.length} ${userClientId ? 'seu cliente' : 'ativos'}) ===\n`;
      clientes.forEach((cliente: any) => {
        context += `\nüè¢ **${cliente.nome}** [ID: ${cliente.id}]\n`;
        context += `   üìà Painel: ${cliente.link_painel || 'N√£o configurado'}\n`;
        context += `   üìã Status: ${cliente.status_cliente} | Categoria: ${cliente.categoria}\n`;
        context += `   üéØ Nicho: ${cliente.nicho} | Etapa: ${cliente.etapa_atual || 'N√£o definida'}\n`;
        context += `   üöÄ Funis: ${cliente.funis_trabalhando?.join(', ') || 'Nenhum'}\n`;
        context += `   üìä Progresso: ${cliente.progresso_etapa || 0}%\n`;
        
        if (isAdmin || userClientId) {
          context += `   üíæ Drive: ${cliente.pasta_drive_url || 'N√£o configurado'}\n`;
          context += `   üí¨ WhatsApp: ${cliente.whatsapp_grupo_url || 'N√£o configurado'}\n`;
          if (cliente.dashboards_looker) {
            context += `   üìä Dashboards: ${JSON.stringify(cliente.dashboards_looker)}\n`;
          }
        }
        
        if (cliente.observacoes) context += `   üìù Obs: ${cliente.observacoes.substring(0, 200)}...\n`;
        context += `   üìÖ √öltimo acesso: ${cliente.ultimo_acesso ? new Date(cliente.ultimo_acesso).toLocaleDateString('pt-BR') : 'Nunca'}\n`;
        context += `   üî¢ Total acessos: ${cliente.total_acessos || 0}\n`;
      });
      context += `\n`;
    }

    // üí∞ OR√áAMENTOS POR FUNIL - Investimentos ativos detalhados
    let orcamentosQuery = supabase
      .from('orcamentos_funil')
      .select(`
        id, nome_funil, valor_investimento, cliente_id, 
        observacoes, ativo, active, data_atualizacao, created_at
      `)
      .eq('ativo', true)
      .eq('active', true);

    if (userClientId && !isAdmin) {
      orcamentosQuery = orcamentosQuery.eq('cliente_id', userClientId);
    }

    const { data: orcamentos } = await orcamentosQuery.limit(50);

    if (orcamentos && orcamentos.length > 0) {
      // Agrupar por cliente para an√°lise
      const orcamentosPorCliente = orcamentos.reduce((acc: any, orc: any) => {
        const clienteId = orc.cliente_id;
        if (!acc[clienteId]) {
          acc[clienteId] = { total: 0, funis: [] };
        }
        acc[clienteId].total += parseFloat(orc.valor_investimento) || 0;
        acc[clienteId].funis.push(orc);
        return acc;
      }, {});

      const totalGeral = orcamentos.reduce((sum: number, orc: any) => sum + (parseFloat(orc.valor_investimento) || 0), 0);
      
      context += `üí∞ OR√áAMENTOS POR FUNIL ATIVOS (${orcamentos.length} funis | Total: R$ ${totalGeral.toLocaleString('pt-BR', {minimumFractionDigits: 2})})\n\n`;
      
      // Detalhar por cliente
      for (const [clienteId, dados] of Object.entries(orcamentosPorCliente) as any) {
        const clienteNome = clientes?.find((c: any) => c.id === clienteId)?.nome || 'Cliente n√£o encontrado';
        context += `üìå **${clienteNome}**\n`;
        context += `   üíµ Total investindo: R$ ${dados.total.toLocaleString('pt-BR', {minimumFractionDigits: 2})}\n`;
        context += `   üéØ Funis ativos (${dados.funis.length}):\n`;
        
        dados.funis.forEach((orc: any) => {
          const percentual = ((parseFloat(orc.valor_investimento) / dados.total) * 100).toFixed(1);
          context += `      ‚Ä¢ ${orc.nome_funil}: R$ ${parseFloat(orc.valor_investimento).toLocaleString('pt-BR', {minimumFractionDigits: 2})} (${percentual}%)`;
          if (orc.observacoes) context += ` - ${orc.observacoes}`;
          context += `\n`;
        });
        context += `\n`;
      }
    }

    // üì® MENSAGENS SEMANAIS - Hist√≥rico de performance com m√©tricas
    let mensagensQuery = supabase
      .from('mensagens_semanais')
      .select('id, cliente_id, semana_referencia, mensagem, enviado, created_at, updated_at')
      .order('semana_referencia', { ascending: false });

    if (userClientId && !isAdmin) {
      mensagensQuery = mensagensQuery.eq('cliente_id', userClientId);
    }

    const { data: mensagens } = await mensagensQuery.limit(60);

    if (mensagens && mensagens.length > 0) {
      // Agrupar por cliente e pegar √∫ltimas 3-4 mensagens de cada
      const mensagensPorCliente = mensagens.reduce((acc: any, msg: any) => {
        const clienteId = msg.cliente_id;
        if (!acc[clienteId]) {
          acc[clienteId] = [];
        }
        if (acc[clienteId].length < 4) {
          acc[clienteId].push(msg);
        }
        return acc;
      }, {});

      context += `üì® MENSAGENS SEMANAIS COM M√âTRICAS (Hist√≥rico recente de ${Object.keys(mensagensPorCliente).length} clientes)\n\n`;
      
      for (const [clienteId, msgs] of Object.entries(mensagensPorCliente) as any) {
        const clienteNome = clientes?.find((c: any) => c.id === clienteId)?.nome || 'Cliente n√£o encontrado';
        context += `üìå **${clienteNome}**\n`;
        
        msgs.forEach((msg: any) => {
          const data = new Date(msg.semana_referencia).toLocaleDateString('pt-BR');
          context += `   üìÖ Semana ${data}:\n`;
          
          // Extrair m√©tricas da mensagem (ROI, ROAS, CPL, CPA, vendas, leads, etc)
          const metricas = extrairMetricasDaMensagem(msg.mensagem);
          if (metricas.length > 0) {
            context += `      üìä **M√©tricas detectadas**: ${metricas.join(' | ')}\n`;
          }
          
          // Resumo da mensagem (primeiras 200 caracteres, limpando quebras de linha)
          if (msg.mensagem) {
            const resumo = msg.mensagem.substring(0, 200).replace(/\n+/g, ' ').trim();
            context += `      üí¨ "${resumo}${msg.mensagem.length > 200 ? '...' : ''}"\n`;
          }
          context += `\n`;
        });
      }
    }

    // TREINAMENTOS E AULAS - Cat√°logo completo
    const { data: treinamentos } = await supabase
      .from('treinamentos')
      .select(`
        id, titulo, categoria, tipo, nivel, descricao, 
        duracao, visualizacoes, tags, url_conteudo, thumbnail_url
      `)
      .eq('ativo', true);

    const { data: aulas } = await supabase
      .from('aulas')
      .select(`
        id, titulo, treinamento_id, tipo_conteudo, duracao, 
        ordem, descricao, url_youtube
      `)
      .eq('ativo', true);

    if (treinamentos && treinamentos.length > 0) {
      context += `üéì CAT√ÅLOGO DE TREINAMENTOS (${treinamentos.length} dispon√≠veis)\n\n`;
      treinamentos.forEach((treino: any) => {
        const aulasDoTreino = aulas?.filter((a: any) => a.treinamento_id === treino.id) || [];
        context += `üìö **${treino.titulo}** [${treino.categoria}]\n`;
        context += `   üéØ Tipo: ${treino.tipo} | N√≠vel: ${treino.nivel}\n`;
        context += `   ‚è±Ô∏è Dura√ß√£o: ${treino.duracao || 'N/A'} min | üëÅÔ∏è Views: ${treino.visualizacoes || 0}\n`;
        context += `   üìñ Aulas: ${aulasDoTreino.length}\n`;
        if (treino.url_conteudo) context += `   üîó URL: ${treino.url_conteudo}\n`;
        if (treino.tags) context += `   üè∑Ô∏è Tags: ${treino.tags.join(', ')}\n`;
        if (treino.descricao) context += `   üìÑ Desc: ${treino.descricao.substring(0, 150)}...\n`;
        
        // Listar principais aulas
        if (aulasDoTreino.length > 0) {
          context += `   üìã Principais aulas:\n`;
          aulasDoTreino.slice(0, 3).forEach((aula: any) => {
            context += `      ${aula.ordem}. ${aula.titulo} (${aula.duracao || 'N/A'} min)\n`;
            if (aula.url_youtube) context += `         üé• ${aula.url_youtube}\n`;
          });
          if (aulasDoTreino.length > 3) {
            context += `      ... e mais ${aulasDoTreino.length - 3} aulas\n`;
          }
        }
        context += `\n`;
      });
    }

    // REFER√äNCIAS DE CRIATIVOS - Com links e materiais
    const { data: referencias } = await supabase
      .from('referencias_criativos')
      .select(`
        id, titulo, categoria, is_template, link_publico, 
        conteudo, links_externos, data_expiracao, cliente_id
      `)
      .eq('ativo', true)
      .limit(30);

    if (referencias && referencias.length > 0) {
      context += `üé® REFER√äNCIAS DE CRIATIVOS (${referencias.length})\n\n`;
      referencias.forEach((ref: any) => {
        context += `üñºÔ∏è **${ref.titulo}** [${ref.categoria}]\n`;
        context += `   üìã Template: ${ref.is_template ? 'Sim' : 'N√£o'}\n`;
        if (ref.link_publico) {
          context += `   üîó Link p√∫blico: ${ref.link_publico}\n`;
        }
        if (ref.links_externos && ref.links_externos.length > 0) {
          context += `   üåê Links externos: ${ref.links_externos.length} dispon√≠veis\n`;
        }
        if (ref.conteudo && ref.conteudo.length > 0) {
          context += `   üìÅ Arquivos: ${ref.conteudo.length} itens\n`;
        }
        if (ref.cliente_id) {
          const clienteRef = clientes?.find((c: any) => c.id === ref.cliente_id);
          if (clienteRef) context += `   üë§ Cliente: ${clienteRef.nome}\n`;
        }
        context += `\n`;
      });
    }

    // DOCUMENTOS DE REUNI√ïES - Pautas e anota√ß√µes (√∫ltimas 15 mais importantes)
    let reunioesDocsQuery = supabase
      .from('reunioes_documentos')
      .select(`
        id, ano, mes, dia, titulo_reuniao, conteudo_texto, 
        cliente_id, status, created_at, participantes
      `)
      .gte('created_at', new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString()) // √öltimos 60 dias
      .order('created_at', { ascending: false });

    if (userClientId && !isAdmin) {
      reunioesDocsQuery = reunioesDocsQuery.eq('cliente_id', userClientId);
    }

    const { data: reunioesDocumentos } = await reunioesDocsQuery.limit(15);

    if (reunioesDocumentos && reunioesDocumentos.length > 0) {
      context += `üìã DOCUMENTOS DE REUNI√ïES (${reunioesDocumentos.length} recentes - √∫ltimos 60 dias)\n\n`;
      
      reunioesDocumentos.forEach((doc: any) => {
        // Tentar identificar cliente pelos aliases se n√£o houver cliente_id definido
        let clienteReunioes = 'Reuni√µes gerais';
        
        if (doc.cliente_id) {
          const clienteEncontrado = clientes?.find((c: any) => c.id === doc.cliente_id);
          if (clienteEncontrado) {
            clienteReunioes = clienteEncontrado.nome;
          }
        } else {
          // Buscar no t√≠tulo por aliases de clientes
          const clienteEncontrado = clientes?.find((c: any) => {
            const nomeUpper = c.nome.toUpperCase();
            const tituloUpper = doc.titulo_reuniao.toUpperCase();
            if (tituloUpper.includes(nomeUpper)) return true;
            if (c.aliases && Array.isArray(c.aliases)) {
              return c.aliases.some((alias: string) => tituloUpper.includes(alias.toUpperCase()));
            }
            return false;
          });
          
          if (clienteEncontrado) {
            clienteReunioes = clienteEncontrado.nome;
          }
        }
        
        const dataReuniao = `${String(doc.dia).padStart(2, '0')}/${String(doc.mes).padStart(2, '0')}/${doc.ano}`;
        context += `üìÖ **${dataReuniao}** - ${doc.titulo_reuniao} (${clienteReunioes})\n`;
        
        if (doc.participantes && doc.participantes.length > 0) {
          context += `   üë• Participantes: ${doc.participantes.slice(0, 3).join(', ')}${doc.participantes.length > 3 ? '...' : ''}\n`;
        }
        
        // Incluir apenas resumo do conte√∫do (primeiros 200 caracteres)
        if (doc.conteudo_texto && doc.conteudo_texto.length > 0) {
          const conteudoLimpo = doc.conteudo_texto
            .replace(/<[^>]*>/g, '') // Remove HTML tags
            .substring(0, 200); // Primeiros 200 caracteres
          
          context += `   üìù ${conteudoLimpo}...\n`;
        }
        
        context += `\n`;
      });
    }

    // GRAVA√á√ïES DE REUNI√ïES - √öltimas grava√ß√µes com transcri√ß√µes (reduzido para 10)
    let gravacoesQuery = supabase
      .from('gravacoes')
      .select(`
        id, titulo, cliente_id, url_gravacao, created_at,
        resumo_ia, palavras_chave
      `)
      .gte('created_at', new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (userClientId && !isAdmin) {
      gravacoesQuery = gravacoesQuery.eq('cliente_id', userClientId);
    }

    const { data: gravacoes } = await gravacoesQuery.limit(10);

    if (gravacoes && gravacoes.length > 0) {
      context += `üé• GRAVA√á√ïES DE REUNI√ïES (${gravacoes.length} recentes)\n\n`;
      gravacoes.forEach((grav: any) => {
        // Tentar identificar cliente pelos aliases se n√£o houver cliente_id definido
        let clienteNome = null;
        
        if (grav.cliente_id) {
          const clienteEncontrado = clientes?.find((c: any) => c.id === grav.cliente_id);
          if (clienteEncontrado) {
            clienteNome = clienteEncontrado.nome;
          }
        } else {
          // Buscar no t√≠tulo por aliases de clientes
          const clienteEncontrado = clientes?.find((c: any) => {
            const nomeUpper = c.nome.toUpperCase();
            const tituloUpper = grav.titulo.toUpperCase();
            if (tituloUpper.includes(nomeUpper)) return true;
            if (c.aliases && Array.isArray(c.aliases)) {
              return c.aliases.some((alias: string) => tituloUpper.includes(alias.toUpperCase()));
            }
            return false;
          });
          
          if (clienteEncontrado) {
            clienteNome = clienteEncontrado.nome;
          }
        }
        
        context += `üìπ **${grav.titulo}**`;
        if (clienteNome) context += ` (${clienteNome})`;
        context += `\n`;
        context += `   üìÖ ${new Date(grav.created_at).toLocaleDateString('pt-BR')}\n`;
        
        if (grav.resumo_ia) {
          context += `   ü§ñ ${grav.resumo_ia.substring(0, 150)}...\n`;
        }
        
        if (grav.palavras_chave && grav.palavras_chave.length > 0) {
          context += `   üîë ${grav.palavras_chave.slice(0, 5).join(', ')}\n`;
        }
        
        context += `\n`;
      });
    }

    // TAREFAS ATIVAS - Priorizadas por relev√¢ncia
    let tarefasQuery = supabase
      .from('tarefas')
      .select(`
        id, titulo, status, prioridade, tipo, cliente_id,
        atribuido_para, data_vencimento, descricao, created_at
      `)
      .in('status', ['pendente', 'em_andamento']);

    if (userClientId && !isAdmin) {
      tarefasQuery = tarefasQuery.eq('cliente_id', userClientId);
    }

    const { data: tarefas } = await tarefasQuery.limit(15);

    if (tarefas && tarefas.length > 0) {
      context += `‚úÖ TAREFAS ATIVAS (${tarefas.length})\n\n`;
      // Ordenar por prioridade
      const tarefasOrdenadas = tarefas.sort((a: any, b: any) => {
        const prioridades: Record<string, number> = { 'alta': 3, 'media': 2, 'baixa': 1 };
        return (prioridades[b.prioridade] || 0) - (prioridades[a.prioridade] || 0);
      });

      tarefasOrdenadas.forEach((tarefa: any) => {
        const clienteTarefa = clientes?.find((c: any) => c.id === tarefa.cliente_id);
        const prioEmoji: Record<string, string> = { 'alta': 'üî¥', 'media': 'üü°', 'baixa': 'üü¢' };
        
        context += `${prioEmoji[tarefa.prioridade] || '‚ö™'} **${tarefa.titulo}** [${tarefa.status}]\n`;
        context += `   üìã Prioridade: ${tarefa.prioridade} | Tipo: ${tarefa.tipo}\n`;
        if (clienteTarefa) context += `   üë§ Cliente: ${clienteTarefa.nome}\n`;
        if (tarefa.data_vencimento) {
          const vencimento = new Date(tarefa.data_vencimento);
          const hoje = new Date();
          const dias = Math.ceil((vencimento.getTime() - hoje.getTime()) / (1000 * 3600 * 24));
          context += `   ‚è∞ Vencimento: ${vencimento.toLocaleDateString('pt-BR')} (${dias} dias)\n`;
        }
        if (tarefa.descricao) context += `   üìÑ Desc: ${tarefa.descricao.substring(0, 120)}...\n`;
        context += `\n`;
      });
    }

    // KICKOFFS - Documentos de in√≠cio de projeto
    let kickoffsQuery = supabase
      .from('kickoffs')
      .select(`
        id, client_id, status, created_at, updated_at,
        kickoff_content (
          id, content_md, version, created_at
        )
      `)
      .order('created_at', { ascending: false });

    if (userClientId && !isAdmin) {
      kickoffsQuery = kickoffsQuery.eq('client_id', userClientId);
    }

    const { data: kickoffs } = await kickoffsQuery.limit(20);

    if (kickoffs && kickoffs.length > 0) {
      context += `üöÄ KICKOFFS - DOCUMENTOS DE IN√çCIO (${kickoffs.length})\n\n`;
      kickoffs.forEach((kickoff: any) => {
        const clienteKickoff = clientes?.find((c: any) => c.id === kickoff.client_id);
        const statusEmoji: Record<string, string> = { 'draft': 'üìù', 'published': '‚úÖ', 'archived': 'üìÅ' };
        
        context += `${statusEmoji[kickoff.status] || 'üìÑ'} **Kickoff ${clienteKickoff?.nome || 'Cliente n√£o encontrado'}** [${kickoff.status}]\n`;
        context += `   üìÖ Criado: ${new Date(kickoff.created_at).toLocaleDateString('pt-BR')}\n`;
        context += `   üîÑ Atualizado: ${new Date(kickoff.updated_at).toLocaleDateString('pt-BR')}\n`;
        
        if (kickoff.kickoff_content && kickoff.kickoff_content.length > 0) {
          const latestContent = kickoff.kickoff_content[kickoff.kickoff_content.length - 1];
          context += `   üìÑ Vers√£o: ${latestContent.version}\n`;
          
          // Extrair informa√ß√µes principais do conte√∫do markdown
          if (latestContent.content_md) {
            const contentPreview = extractKickoffSummary(latestContent.content_md);
            if (contentPreview) {
              context += `   üìã Conte√∫do:\n${contentPreview}\n`;
            }
          }
        }
        context += `\n`;
      });
    }

    // PDIs (Planos de Desenvolvimento Individual)
    const { data: pdis } = await supabase
      .from('pdis')
      .select(`
        id, titulo, status, data_limite, descricao, 
        colaborador_id, created_by, created_at
      `)
      .order('created_at', { ascending: false })
      .limit(10);

    if (pdis && pdis.length > 0) {
      context += `üéØ PDIs - PLANOS DE DESENVOLVIMENTO (${pdis.length})\n\n`;
      pdis.forEach((pdi: any) => {
        context += `üìä **${pdi.titulo}** [${pdi.status}]\n`;
        context += `   üìÖ Prazo: ${pdi.data_limite ? new Date(pdi.data_limite).toLocaleDateString('pt-BR') : 'Indefinido'}\n`;
        if (pdi.descricao) context += `   üìÑ Desc: ${pdi.descricao.substring(0, 120)}...\n`;
        context += `\n`;
      });
    }

    // ESTAT√çSTICAS E RESUMO EXECUTIVO
    context += `üìà ESTAT√çSTICAS DO SISTEMA\n`;
    context += `‚îú‚îÄ‚îÄ üè¢ Clientes ativos: ${clientes?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üéì Treinamentos: ${treinamentos?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üìö Aulas: ${aulas?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üé® Refer√™ncias: ${referencias?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üìã Documentos de reuni√µes: ${reunioesDocumentos?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üé• Grava√ß√µes: ${gravacoes?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üí∞ Or√ßamentos: ${orcamentos?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üì® Mensagens semanais: ${mensagens?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ ‚úÖ Tarefas ativas: ${tarefas?.length || 0}\n`;
    context += `‚îú‚îÄ‚îÄ üöÄ Kickoffs: ${kickoffs?.length || 0}\n`;
    context += `‚îî‚îÄ‚îÄ üéØ PDIs: ${pdis?.length || 0}\n\n`;

    if (userClientId && !isAdmin) {
      context += `üîí NOTA: Dados filtrados para o seu cliente espec√≠fico.\n`;
    } else if (!isAdmin) {
      context += `üîí NOTA: Dados sens√≠veis limitados ao seu n√≠vel de acesso.\n`;
    }

    return context;

  } catch (error) {
    console.error('Erro ao buscar contexto do sistema:', error);
    return "‚ùå Erro ao carregar informa√ß√µes do sistema. Dados filtrados por permiss√µes de usu√°rio.";
  }
}

// Fun√ß√£o auxiliar para extrair m√©tricas de mensagens semanais
function extrairMetricasDaMensagem(mensagem: string): string[] {
  if (!mensagem) return [];
  
  const metricas: string[] = [];
  const texto = mensagem.toLowerCase();
  
  // Padr√µes de m√©tricas comuns em mensagens semanais
  const padroes = [
    { regex: /roas[:\s]+([0-9,.]+)/i, nome: 'ROAS' },
    { regex: /roi[:\s]+([0-9,.]+)%?/i, nome: 'ROI' },
    { regex: /cpl[:\s]+r?\$?\s*([0-9,.]+)/i, nome: 'CPL' },
    { regex: /cpa[:\s]+r?\$?\s*([0-9,.]+)/i, nome: 'CPA' },
    { regex: /ctr[:\s]+([0-9,.]+)%/i, nome: 'CTR' },
    { regex: /cpc[:\s]+r?\$?\s*([0-9,.]+)/i, nome: 'CPC' },
    { regex: /cpm[:\s]+r?\$?\s*([0-9,.]+)/i, nome: 'CPM' },
    { regex: /([0-9]+)\s*vendas?/i, nome: 'Vendas' },
    { regex: /([0-9]+)\s*leads?/i, nome: 'Leads' },
    { regex: /([0-9]+)\s*convers√µes?/i, nome: 'Convers√µes' },
    { regex: /investimento[:\s]+r?\$?\s*([0-9,.]+)/i, nome: 'Investimento' },
    { regex: /faturamento[:\s]+r?\$?\s*([0-9,.]+)/i, nome: 'Faturamento' },
    { regex: /ticket\s*m√©dio[:\s]+r?\$?\s*([0-9,.]+)/i, nome: 'Ticket M√©dio' },
    { regex: /convers√£o[:\s]+([0-9,.]+)%/i, nome: 'Taxa Convers√£o' },
  ];
  
  padroes.forEach(({ regex, nome }) => {
    const match = texto.match(regex);
    if (match && match[1]) {
      metricas.push(`${nome}: ${match[1]}`);
    }
  });
  
  return metricas;
}

// Fun√ß√£o para detectar se a consulta √© sobre transcri√ß√µes ou reuni√µes
function detectTranscriptionQuery(message: string): boolean {
  const transcriptionKeywords = [
    'reuni√£o', 'reuni√µes', 'meeting', 'encontro', 'call', 'pauta',
    'transcri√ß√£o', 'transcricao', 'ata', 'grava√ß√£o', 'gravacao',
    'resumo', 'resumir', 'prometemos', 'compromisso', 'acordo',
    'decidimos', 'combinamos', 'falamos sobre', 'discutimos',
    '√∫ltima reuni√£o', 'ultima reuni√£o', 'reuni√£o passada', 'reuni√£o com',
    'o que foi dito', 'que foi decidido', 'pr√≥ximos passos',
    'proximos passos', 'a√ß√£o', 'prazo', 'deadline', 'pend√™ncia',
    'qual foi a', 'quando foi', 'anota√ß√µes', 'anotacoes', 'documento',
    'tratado', 'mencionado', 'falado', 'discutido', 'conversamos',
    // Nomes de clientes comuns para detectar perguntas espec√≠ficas
    'cliente', 'jucinones', 'paloma', 'gislene', 'isquierdo', 'mateco'
  ];
  
  const messageLower = message.toLowerCase();
  return transcriptionKeywords.some(keyword => messageLower.includes(keyword));
}

// Fun√ß√£o para buscar e processar transcri√ß√µes relevantes
async function searchTranscriptions(supabase: any, userId: string, query: string) {
  try {
    console.log('Buscando transcri√ß√µes para:', query);
    
    // Extrair informa√ß√µes da query
    const extractedInfo = extractQueryInfo(query);
    
    // Chamar a fun√ß√£o SQL de busca em transcri√ß√µes
    const { data: results, error } = await supabase.rpc('buscar_transcricoes_reunioes', {
      _user_id: userId,
      _query: extractedInfo.searchTerms,
      _limit: 5
    });
    
    if (error) {
      console.error('Erro ao buscar transcri√ß√µes:', error);
      return '';
    }
    
    if (!results || results.length === 0) {
      return '‚ö†Ô∏è Nenhuma transcri√ß√£o encontrada para a consulta especificada.';
    }
    
    // Formatear resultados
    let context = `üìã TRANSCRI√á√ïES ENCONTRADAS (${results.length} relevantes):\n\n`;
    
    results.forEach((result: any, index: number) => {
      context += `### ${index + 1}. ${result.titulo} (${result.tipo})\n`;
      context += `**Cliente:** ${result.cliente_nome}\n`;
      context += `**Data:** ${new Date(result.data_reuniao).toLocaleDateString('pt-BR')}\n`;
      
      if (result.url_gravacao) {
        context += `**Link:** ${result.url_gravacao}\n`;
      }
      
      // Mostrar informa√ß√µes estruturadas da IA
      if (result.topicos_principais && result.topicos_principais.length > 0) {
        context += `**T√≥picos Principais:** ${result.topicos_principais.join(', ')}\n`;
      }
      
      if (result.decisoes_tomadas && result.decisoes_tomadas.length > 0) {
        context += `**Decis√µes Tomadas:**\n`;
        result.decisoes_tomadas.slice(0, 3).forEach((decisao: any) => {
          context += `  ‚Ä¢ ${decisao.decisao}${decisao.responsavel ? ` (${decisao.responsavel})` : ''}\n`;
        });
      }
      
      if (result.pendencias && result.pendencias.length > 0) {
        context += `**Pend√™ncias/Tarefas:**\n`;
        result.pendencias.slice(0, 3).forEach((pendencia: any) => {
          context += `  ‚Ä¢ ${pendencia.tarefa}${pendencia.responsavel ? ` - ${pendencia.responsavel}` : ''}${pendencia.prazo ? ` (${pendencia.prazo})` : ''}\n`;
        });
      }
      
      if (result.resumo_ia) {
        context += `**Resumo IA:** ${result.resumo_ia.substring(0, 200)}...\n`;
      }
      
      if (result.palavras_chave && result.palavras_chave.length > 0) {
        context += `**Palavras-chave:** ${result.palavras_chave.join(', ')}\n`;
      }
      
      if (result.transcricao) {
        // Extrair trechos relevantes da transcri√ß√£o
        const relevantExcerpts = extractRelevantExcerpts(result.transcricao, query);
        if (relevantExcerpts) {
          context += `**Trechos relevantes:**\n${relevantExcerpts}\n`;
        }
      }
      
      context += `**Relev√¢ncia:** ${(result.relevancia * 100).toFixed(1)}%\n\n`;
    });
    
    return context;
    
  } catch (error) {
    console.error('Erro ao buscar transcri√ß√µes:', error);
    return '‚ùå Erro ao buscar transcri√ß√µes. Tente novamente.';
  }
}

// Fun√ß√£o para extrair informa√ß√µes espec√≠ficas da query
function extractQueryInfo(query: string) {
  const queryLower = query.toLowerCase();
  
  // Extrair cliente - incluir nomes compostos como GISLENEISQUIERDO
  let clienteId = null;
  const clientePatterns = [
    /(?:cliente|para|pra|com)\s+([A-Z]{2,})/gi,
    /([A-Z]{2,})(?:\s+na|√∫ltima|ultima)/gi,
    /(gislene|isquierdo|gisleneisquierdo|paloma)/gi
  ];
  
  // Extrair datas
  let dataInicio = null;
  let dataFim = null;
  const datePatterns = [
    /(\d{1,2}\/\d{1,2}\/\d{4})/g,
    /(\d{1,2}\/\d{1,2})/g,
    /(hoje|ontem|semana passada|m√™s passado)/gi
  ];
  
  // Extrair respons√°vel
  let responsavel = null;
  if (queryLower.includes('paloma')) {
    responsavel = 'paloma';
  }
  
  // Termos de busca - manter nomes de clientes para busca
  let searchTerms = query;
  
  // Se detectar um nome espec√≠fico de cliente, priorizar na busca
  if (queryLower.includes('gislene') || queryLower.includes('isquierdo')) {
    searchTerms = 'GISLENEISQUIERDO ' + searchTerms;
  }
  
  return {
    searchTerms: searchTerms || query,
    clienteId,
    dataInicio,
    dataFim,
    responsavel
  };
}

// Fun√ß√£o para extrair trechos relevantes da transcri√ß√£o
function extractRelevantExcerpts(transcricao: string, query: string, maxLength: number = 400): string {
  if (!transcricao) return '';
  
  const queryWords = query.toLowerCase().split(' ').filter(word => word.length > 2);
  const sentences = transcricao.split(/[.!?]+/);
  
  // Encontrar senten√ßas mais relevantes
  const relevantSentences = sentences
    .map(sentence => {
      const lowerSentence = sentence.toLowerCase();
      const score = queryWords.reduce((acc, word) => {
        return acc + (lowerSentence.includes(word) ? 1 : 0);
      }, 0);
      return { sentence: sentence.trim(), score };
    })
    .filter(item => item.score > 0)
    .sort((a, b) => b.score - a.score)
    .slice(0, 3)
    .map(item => `"${item.sentence}"`);
  
  const result = relevantSentences.join('\n');
  return result.length > maxLength ? result.substring(0, maxLength) + '...' : result;
}

// Fun√ß√£o para extrair resumo do conte√∫do do kickoff
function extractKickoffSummary(contentMd: string): string {
  if (!contentMd) return '';
  
  try {
    // Extrair se√ß√µes principais do markdown
    const lines = contentMd.split('\n');
    let summary = '';
    let currentSection = '';
    
    for (const line of lines) {
      // Detectar headers principais
      if (line.startsWith('##') && !line.startsWith('###')) {
        currentSection = line.replace(/^##\s*/, '').trim();
        summary += `      ‚Ä¢ ${currentSection}\n`;
      }
      // Extrair informa√ß√µes importantes de listas
      else if (line.match(/^\s*[-*+]\s+/) && currentSection) {
        const item = line.replace(/^\s*[-*+]\s+/, '').trim();
        if (item.length > 10 && item.length < 100) {
          summary += `        - ${item}\n`;
        }
      }
      // Extrair objetivos ou metas se houver
      else if (line.toLowerCase().includes('objetivo') || line.toLowerCase().includes('meta')) {
        const objective = line.trim();
        if (objective.length < 150) {
          summary += `        üéØ ${objective}\n`;
        }
      }
    }
    
    // Limitar tamanho do resumo
    if (summary.length > 500) {
      summary = summary.substring(0, 500) + '...\n';
    }
    
    return summary || '        (Conte√∫do estruturado dispon√≠vel)';
    
  } catch (error) {
    console.error('Erro ao extrair resumo do kickoff:', error);
    return '        (Erro ao processar conte√∫do)';
  }
}